{"version":3,"sources":["components/Search/Results/Results.js","components/Search/SearchFlights/SearchFlights.js","components/Flight/Seat/Seat.js","components/Flight/ConfirmSeat/ConfirmSeat.js","components/Flight/SeatingChart/SeatingChart.js","components/Flight/FlightDetails/FlightDetails.js","Routes.js","serviceWorker.js","index.js"],"names":["Results","react_default","a","createElement","this","props","searchResults","map","data","key","date","Date","Number","localDate","concat","getDate","getMonth","getFullYear","react_router_dom","to","flightNumber","from","airplane","Component","SearchFlights","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","destinations","fromValue","toValue","currentDate","_handleChangeFrom","bind","assertThisInitialized","_handleChangeTo","_handleSubmit","e","setState","target","value","_this2","preventDefault","getTime","axios","get","then","results","flight","flight_number","origin","destination","model","onSubmit","onChange","renderDestinations","type","Search_Results_Results","styleActive","backgroundColor","border","transition","styleNormal","Seat","_this$props","dataRow","dataColumn","activeSeat","onClick","data-row","data-column","style","user_id","ConfirmSeat","isBooked","_handleClick","toggleConfirm","activeRow","activeColumn","post","flight_id","row","column","res","_this$props2","Fragment","renderMsg","renderConfirm","SeatingChart","reservations","id","userNames","0","_handleSeatClick","users","forEach","user","objectSpread","defineProperty","name","result","getRes","setTimeout","getAttribute","_this$state","Array","seat","index","rowVal","Math","ceil","colVal","Flight_Seat_Seat","random","className","_this3","reservation","gridColumn","gridRow","overflow","display","alignItems","justifyContent","_this$state2","position","gridTemplateRows","gridTemplateColumns","gridColumnGap","gridRowGap","width","margin","renderSeats","pointerEvents","renderReservations","Flight_ConfirmSeat_ConfirmSeat","FlightDetails","_selectedFlight$","filter","match","params","fetchFlight","Flight_SeatingChart_SeatingChart","Routes","react_router","exact","path","component","render","Flight_FlightDetails_FlightDetails","assign","flightData","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce1a564f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Results extends Component {\n\n  render() {\n    return (\n    <table>\n      <thead>\n        <th>Date</th>\n        <th>Flight No.</th>\n        <th>From:</th>\n        <th>To:</th>\n        <th>Flight Model:</th>\n      </thead>\n      <tbody>\n        {this.props.searchResults.map(function(data, key) {\n          const date = new Date(Number(data.date));\n          const localDate = `${date.getDate()} / ${date.getMonth() +\n            1} / ${date.getFullYear() - 2000}`;\n          return (\n            <tr key = {key}>\n              <td>{localDate}</td>\n              <td><Link to={`/flight/${data.flightNumber}`}>{data.flightNumber}</Link></td>\n              <td>{data.from}</td>\n              <td>{data.to}</td>\n              <td>{data.airplane}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  );\n  }\n}\n\nexport default Results;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Results from \"../Results/Results\";\n\nclass SearchFlights extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      destinations: [\"\", \"Sydney\", \"Brisbane\", \"Melbourne\", \"Salvador\"],\n      fromValue: \"\",\n      toValue: \"\",\n      currentDate: 0,\n      searchResults: []\n    };\n\n    this._handleChangeFrom = this._handleChangeFrom.bind(this);\n    this._handleChangeTo = this._handleChangeTo.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n  }\n\n  _handleChangeFrom(e) {\n    this.setState({\n      fromValue: e.target.value\n    });\n  }\n\n  _handleChangeTo(e) {\n    this.setState({\n      toValue: e.target.value\n    });\n  }\n\n  _handleSubmit(e) {\n    e.preventDefault();\n    const currentDate = new Date().getTime();\n    this.setState({ currentDate });\n\n    const customResults = [{\n      date: 1557187200034, // if we use milliseconds it's easy to arrange dates\n      flightNumber: 23, // probably the flight_id?\n      from: \"Melbourne\", // not sure if we store these front end or create another table?\n      to: \"Sydney\", // not sure if we store these front end or create another table?\n      airplane: \"747\" // might need to be :airplane_id and we get the :name from that?\n    },\n    {\n      date: 1557187200038, // if we use milliseconds it's easy to arrange dates\n      flightNumber: 26, // probably the flight_id?\n      from: \"Paris\", // not sure if we store these front end or create another table?\n      to: \"Tokyo\", // not sure if we store these front end or create another table?\n      airplane: \"757\" // might need to be :airplane_id and we get the :name from that?\n    }];\n\n    axios.get(\"https://burning-airlines-sei31.herokuapp.com/flights.json\").then(results => {\n\n      const searchResults = results.data.map((flight) => {\n        return {\n          date: flight.date,\n          flightNumber: flight.flight_number,\n          from: flight.origin,\n          to: flight.destination,\n          airplane: flight.airplane.model\n        }\n      });\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  renderDestinations() {\n    return this.state.destinations.map(destination => {\n      return (\n        <option key={destination} value={destination}>\n          {destination}\n        </option>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Search for flights</h1>\n        <form onSubmit={this._handleSubmit}>\n          <select onChange={this._handleChangeFrom}>\n            {this.renderDestinations()}\n          </select>\n          <select onChange={this._handleChangeTo}>\n            {this.renderDestinations()}\n          </select>\n          <button>Cancel</button>\n          <input type=\"submit\" value=\"Search\" />\n        </form>\n        <Results searchResults={this.state.searchResults} />\n      </div>\n    );\n  }\n}\n\nexport default SearchFlights;\n","import React, { Component } from \"react\";\n\n\nconst styleActive = {\n  backgroundColor: \"red\",\n  border: \"1px solid black\",\n  transition: \"all .3s\"\n}\n\nconst styleNormal = {\n  backgroundColor: \"white\",\n  border: \"1px solid black\",\n  transition: \"all .3s\"\n}\n\nclass Seat extends Component {\n\n  render() {\n    const { dataRow, dataColumn, activeSeat, onClick } = this.props;\n    if (activeSeat !== true) { //this.props.selectedSeat.id  or .reservation_id??\n      return(\n        <div onClick={ onClick } data-row={dataRow} data-column={dataColumn} style={styleNormal}>\n          {dataRow}{dataColumn} Avail\n        </div>\n      )\n    } else {\n      return(\n        <div onClick={ onClick } data-row={dataRow} data-column={dataColumn} style={styleActive}>\n          <p>{ this.props.user_id }</p>\n        </div>\n      )\n    }\n  }\n}\n\nexport default Seat;\n// will have to show the user name from reservation\n//\n\n// return (\n//   <div className={this.state.isAvailable ? \"Available\" : \"Taken\"} onClick={ this._handleClick }>\n//     <div className={ this.props.selectedSeat === this.props.resevation_seatId && !this.state.isTaken ? \"X\" : \"Available\" }>\n//\n//     </div>\n//   </div>\n// );\n// render() {\n//\n// }\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass ConfirmSeat extends Component {\n  constructor() {\n    super();\n    this.state = { isBooked: false }\n    this._handleClick = this._handleClick.bind(this)\n    this.toggleConfirm = this.toggleConfirm.bind(this)\n  }\n\n  toggleConfirm() {\n    this.setState({ isBooked: !this.state.isBooked })\n  }\n\n  _handleClick() {\n    const {activeRow, activeColumn, flightNumber} = this.props\n    axios.post(\"https://burning-airlines-sei31.herokuapp.com/reservations.json\",\n    {\n    \"user_id\": 1,\n    \"flight_id\": flightNumber,\n    \"row\": activeRow,\n    \"column\":`${activeColumn}`\n  }).then(res => this.toggleConfirm())\n  }\n\n\n  renderConfirm() {\n    const {activeRow, activeColumn} = this.props\n    return (\n      <>\n        <p>Confirm Seat: </p>\n        <p>{activeRow}{activeColumn}</p>\n        <button onClick={ this._handleClick }>Book Now!</button>\n      </>\n    )\n  }\n\n  renderMsg() {\n    return (\n      <>\n        <p>Congratulations</p>\n        <button onClick={ this.toggleConfirm }>Book another seat</button>\n      </>\n    )\n  }\n\n  render() {\n\n    return (\n      this.state.isBooked ? <>{this.renderMsg()}</> : <>{this.renderConfirm()}</>\n\n    )\n  }\n}\n\nexport default ConfirmSeat\n","import React, { Component } from \"react\";\nimport Seat from \"../Seat/Seat.js\";\nimport ConfirmSeat from '../ConfirmSeat/ConfirmSeat'\nimport axios from \"axios\";\nimport \"./SeatingChart.css\";\n\nclass SeatingChart extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeRow: 0,\n      activeColumn: 0,\n      airplane: {\n        row: 0,\n        column: 0\n      },\n      reservations: [{\n        id: 0,\n        user_id: 3,\n        column: 0,\n        row: 0\n      }],\n      userNames: {\n        0: \"\"\n      }\n    };\n    this._handleSeatClick = this._handleSeatClick.bind(this);\n\n    const getUser = () => axios.get(\"https://burning-airlines-sei31.herokuapp.com/users.json\").then(users => {\n      let userNames = {};\n      users.data.forEach(user => {\n        userNames = { ...userNames, [user.id]: user.name }\n      });\n      this.setState({userNames});\n    });\n    getUser();\n\n    const getData = () => {axios.get(\"https://burning-airlines-sei31.herokuapp.com/airplanes.json\").then((result) => this.setState({airplane: result.data[0]}))\n    }\n    getData();\n\n    const getRes = () => {axios.get(\"https://burning-airlines-sei31.herokuapp.com/reservations.json\").then((result) =>\n    this.setState({reservations: result.data}),\n      setTimeout( getRes, 2000)\n    )}\n    getRes();\n  }\n\n  _handleSeatClick(e) {\n    const row = e.target.getAttribute(\"data-row\");\n    const column = e.target.getAttribute(\"data-column\");\n    this.setState({\n      activeRow: row,\n      activeColumn: column\n    });\n  }\n\n  renderSeats() {\n    const { activeRow, activeColumn, airplane } = this.state;\n    const { row, column } = airplane;\n    const seats = Array.from(new Array(row * column));\n    return seats.map((seat, index) => {\n      const rowVal = Math.ceil((index + 1) / column);\n      const colVal = index + 1 - (rowVal - 1) * column;\n      const activeSeat =\n        activeRow == rowVal && activeColumn == colVal ? true : false;\n      return (\n        <Seat\n          key={index * Math.random()}\n          className=\"seat\"\n          id={index}\n          dataColumn={colVal}\n          dataRow={rowVal}\n          activeSeat={activeSeat}\n          onClick={this._handleSeatClick}\n        />\n      );\n    });\n  }\n\n\n  renderReservations() {\n    return this.state.reservations.map(reservation => {\n      const { id, column, row, user_id } = reservation;\n      return (\n        <div\n          key={id}\n          className=\"seat\"\n          style={{\n            gridColumn: column,\n            gridRow: row,\n            border: \"1px solid black\",\n            backgroundColor: \"#eee\",\n            overflow: \"hidden\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          }}\n          data-column={column}\n          data-row={row}\n          onClick={this._handleSeatClick}\n        >\n         {this.state.userNames[user_id]}\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const { activeRow, activeColumn } = this.state;\n    return (\n      <>\n        <h3 className=\"seating-chart-heading\">Select A Seat</h3>\n        <div className=\"seating-chart-row-names\" />\n        <div className=\"plane\">\n          <div\n            style={{\n              position: \"absolute\",\n              display: \"grid\",\n              gridTemplateRows: `repeat(${this.state.airplane.row}, 50px)`,\n              gridTemplateColumns: `repeat(${Number(this.state.airplane.column)}, 50px)`,\n              gridColumnGap: \"5px\",\n              gridRowGap: \"10px\",\n              width: `${55 * this.state.airplane.column}px`,\n              margin: \"0 auto\"\n            }}\n          >\n            {this.renderSeats()}\n\n          </div>\n          <div\n            style={{\n              position: \"absolute\",\n              display: \"grid\",\n              gridTemplateRows: `repeat(${this.state.airplane.row}, 50px)`,\n              gridTemplateColumns: `repeat(${Number(this.state.airplane.column)}, 50px)`,\n              gridColumnGap: \"5px\",\n              gridRowGap: \"10px\",\n              width: `${55 * this.state.airplane.column}px`,\n              margin: \"0 auto\",\n              pointerEvents: \"none\"\n            }}\n          >\n            {this.renderReservations()}\n          </div>\n        </div>\n        <ConfirmSeat\n          activeRow={ activeRow }\n          activeColumn={ activeColumn }\n          flightNumber={ this.props.flightNumber }\n        />\n      </>\n    );\n  }\n}\n\nexport default SeatingChart;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport SeatingChart from \"../SeatingChart/SeatingChart\";\nimport \"./FlightDetails.css\";\n\nclass FlightDetails extends Component {\n  constructor() {\n    super();\n    this.state = { date: 0 };\n  }\n\n  fetchFlight() {\n    axios.get(\"https://burning-airlines-sei31.herokuapp.com/flights.json\").then(results => {\n      const selectedFlight = results.data.filter(\n        result => result.id == this.props.match.params.name\n      );\n      const { flight_number, date, origin, destination } = selectedFlight[0];\n      this.setState({ flight_number, date, origin, destination });\n    });\n  }\n\n  componentDidMount() {\n    this.fetchFlight();\n  }\n\n  componentWillReceiveProps() {\n    this.fetchFlight();\n  }\n\n  render() {\n    const date = new Date(Number(this.state.date));\n    const localDate = `${date.getDate()} / ${date.getMonth() +\n      1} / ${date.getFullYear() - 2000}`;\n    return (\n      <div>\n        <h1>Flight Details</h1>\n        <h3>\n          <span className=\"flight-details-heading\">{localDate}</span>\n          <span className=\"flight-details-heading\">\n            Flight {this.state.flight_number}\n          </span>\n          <span className=\"flight-details-heading\">{this.state.origin}</span>\n          <span className=\"flight-details-heading\">\n            {this.state.destination}\n          </span>\n        </h3>\n        <SeatingChart\n          flightNumber={this.props.match.params.name}\n        />\n      </div>\n    );\n  }\n}\n\nexport default FlightDetails;\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport SearchFlights from \"./components/Search/SearchFlights/SearchFlights\";\nimport FlightDetails from \"./components/Flight/FlightDetails/FlightDetails\";\n\nconst Routes = (\n  <Router>\n    <div>\n      <Route exact path=\"/searchflights\" component={SearchFlights} />\n      <Route\n        exact\n        path=\"/flight/:name\"\n        render={props => <FlightDetails {...props} flightData={\"test\"} />}\n      />\n    </div>\n  </Router>\n);\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(Routes, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}